#include <iostream>
#include <cmath>
#include <windows.h>

int main()
{
    setlocale(LC_ALL, "Russian"); //подключение русской раскладки
    SetConsoleOutputCP(CP_UTF8);
    double x1 = 0, x2 = 0;
    int D = 0, i = 0, k = 0;
    bool ist = 0, istDOT = 0;
    int a = 0, b = 0, c = 0; //значения в типе int
    std::string a1 = "", b1 = "", c1 = ""; //значения в типе string
    std::cin >> a1 >> b1 >> c1;
    for (i = 0; i < a1.size(); i++)  // проверка введеного значения на наличие букв
    {
        if ((a1[i] >= '0') and (a1[i] <= '9') or ((a1[i] == '-') and (i == 0)) or (a1[i] == '.'))
        {
            ist = 0;
            if (a1[i] == '.')
            {
                istDOT = 1; //проверка на наличие точки в введеном значении
            }
        }
        else
            ist = 1; //флаг, показывающий наличие букв, или др. знаков, не относящихся к числам
        if (ist != 0)
        {
            std::cout << "Ошибка, введен не численный тип данных, завершение программы";
            exit(0);
        }
    }
    if (istDOT == 1) //проверка флага на наличие точки в введеном значении
    {
        std::cout << "Значения должны быть заданы целми числами, завершение программы";
        exit(0);
    }
    for (i = 0; i < b1.size(); i++) // проверка введеного значения на наличие букв
    {
        if ((b1[i] >= '0') and (b1[i] <= '9') or ((b1[i] == '-') and (i == 0)) or (b1[i] == '.'))
        {
            ist = 0;
            if (b1[i] == '.')
            {
                istDOT = 1; //проверка на наличие точки в введеном значении
            }
        }
        else
            ist = 1; //флаг, показывающий наличие букв, или др. знаков, не относящихся к числам
        if (ist != 0)
        {
            std::cout << "Ошибка, введен не численный тип данных, завершение программы";
            exit(0);
        }
    }
    if (istDOT == 1) //проверка флага на наличие точки в введеном значении
    {
        std::cout << "Значения должны быть заданы целыи числами, завершение программы";
        exit(0);
    }
    for (i = 0; i < c1.size(); i++) // проверка введеного значения на наличие букв
    {
        if ((c1[i] >= '0') and (c1[i] <= '9') or ((c1[i] == '-') and (i == 0)) or (c1[i] == '.'))
        {
            ist = 0;
            if (c1[i] == '.')
            {
                istDOT = 1; //проверка на наличие точки в введеном значении
            }
        }
        else
            ist = 1; //флаг, показывающий наличие букв, или др. знаков, не относящихся к числам
        if (ist != 0)
        {
            std::cout << "Ошибка, введен не численный тип данных, завершение программы";
            exit(0);
        }
    }
    if (istDOT == 1) //проверка флага на наличие точки в введеном значении
    {
        std::cout << "Значения должны быть заданы целми числами, завершение программы";
        exit(0);
    }
    if (a1[0] == '-') //проверка на ниличие минуса перед числом
        k = 1;
    else
        k = 0;
    for (i = k; i < a1.size(); i++) //превращение числа из char в int
    {
        a = int(a1[i]) - '0' + a * 10;
    }
    if (k == 1) //при наличии минуса в string, полученное число в int умножается на -1
        a *= -1;
    if (b1[0] == '-')
        k = 1;
    else
        k = 0;
    for (i = k; i < b1.size(); i++)
    {
        b = int(b1[i]) - '0' + b * 10;
    }
    if (k == 1)
        b *= -1;
    if (c1[0] == '-')
        k = 1;
    else
        k = 0;
    for (i = k; i < c1.size(); i++)
    {
        c = int(c1[i]) - '0' + c * 10;
    }
    if (k == 1)
        c *= -1;
    if (a == 0) //решение уравнения исходя из введёных коэффициентов
    {
        if (b == 0)
        {
            if (c == 0)
                std::cout << "Корней бесчисленное множество";
            if (c != 0)
                std::cout << "Корней нет";
        }
        else
        {
            std::cout << "Корень: " << float(-c) / b;
        }
        exit(0);
    }
    if (b == 0)
    {
        if (float(-c) / a < 0)
        {
            std::cout << "Корней нет";
        }
        else
        {
            if (float(-c) / a == 0)
                std::cout << "Корень: " << 0;
            else
                std::cout << "Первый корень: " << -sqrt(float(-c) / a) << std::endl << "Второй корень: " << sqrt(float(-c) / a);
        }
        exit(0);
    }
    D = pow(int(b), 2) - 4 * a * c;
    if (int(sqrt(D)) != float(sqrt(D))) // проверка на извлечение целого числа из под корня
    {
        std::cout << "Из дискриминанта не извлекается целое число!";
        exit(0);
    }
    if (D < 0)
    {
        std::cout << "Корней нет";
        exit(0);
    }
    x1 = float(-b + sqrt(D)) / (2 * a);
    x2 = float(-b - sqrt(D)) / (2 * a);
    if (x1 == x2) // проверка на совпавшие корни
    {
        std::cout << "Корень: " << x1;
    }
    else
    {
        std::cout << "Первый корень: " << x1 << std::endl << "Второй корень: " << x2;
    }
    return 0;
}